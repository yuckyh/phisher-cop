"""
Module for loading feature data from files, including top domains and suspicious words.

This module provides utilities for:
1. Loading and managing lists of legitimate/safe domains
2. Loading suspicious words commonly found in phishing emails
3. Efficiently accessing this data for feature extraction

The data files are loaded as sets for O(1) lookups, improving the
performance of feature extraction functions. This module serves as
the data access layer for the phishing detection features.

The top domains list contains legitimate domains that are unlikely
to be associated with phishing, while the suspicious words list
contains terms frequently found in phishing attempts.
"""

import os

from . import PROJECT_ROOT

BASE_DIR = os.path.join(PROJECT_ROOT, "feature_data")
TOP_DOMAINS = os.path.join(BASE_DIR, "top_domains.txt")
SUSPICIOUS_WORDS = os.path.join(BASE_DIR, "suspicious_words.txt")


def load_lines_as_set(filepath: str, lower: bool) -> set[str]:
    """
    Load the lines of a file into a set, stripping whitespace and optionally converting to lowercase.

    This function reads a text file where each line represents a separate item,
    and converts it into a set for efficient lookups. Empty lines after stripping
    are automatically filtered out.

    Args:
        filepath: Path to the file to read
        lower: Whether to convert all strings to lowercase

    Returns:
        set[str]: Set containing non-empty lines from the file

    Example:
        >>> # For a file containing: "Apple\\n  Banana\\n\\nCherry  "
        >>> result = load_lines_as_set("fruits.txt", True)
        >>> sorted(result)
        ['apple', 'banana', 'cherry']
        >>> # For a file with mixed case and keeping original case:
        >>> # File content: "Red\\nGREEN\\nBlue"
        >>> case_sensitive = load_lines_as_set("colors.txt", False)
        >>> sorted(case_sensitive)
        ['Blue', 'GREEN', 'Red']
        >>> # Same file but converting to lowercase:
        >>> case_insensitive = load_lines_as_set("colors.txt", True)
        >>> sorted(case_insensitive)
        ['blue', 'green', 'red']
    """
    with open(filepath, "r") as f:
        return {
            stripped.lower() if lower else stripped
            for line in f.readlines()
            if (stripped := line.strip())
        }


def load_top_domains() -> set[str]:  # pragma: no cover
    """
    Load the list of top legitimate domains from the feature data file.

    This function reads a curated list of trusted domains that are unlikely
    to be associated with phishing attempts. The domains are loaded in lowercase
    for case-insensitive matching.

    Returns:
        set[str]: Set of top legitimate domains in lowercase

    Note:
        The top domains list is sourced from Cloudflare's domain rankings.

    Example:
        >>> top_domains = load_top_domains()
        >>> print('google.com' in top_domains)
        True
        >>> print('example.com' in top_domains)
        False
        >>> # Check if any domain contains 'amazon'
        >>> print(any('amazon' in domain for domain in top_domains))
        True
    """
    # Top 500 legit domains taken from https://radar.cloudflare.com/domains
    return load_lines_as_set(TOP_DOMAINS, True)


def load_suspicious_words() -> set[str]:  # pragma: no cover
    """
    Load the list of suspicious words commonly found in phishing emails.

    This function reads a list of words that are frequently associated with
    phishing attempts, such as terms related to urgency, financial matters,
    security, or account issues. The words are loaded in lowercase
    for case-insensitive matching during feature extraction.

    Returns:
        set[str]: Set of suspicious words in lowercase

    Note:
        The suspicious words list is generated by the src/train.py script,
        which analyzes the training corpus to identify words correlated with phishing.

    Example:
        >>> suspicious_words = load_suspicious_words()
        >>> print('password' in suspicious_words)
        True
        >>> print('hello' in suspicious_words)
        False
        >>> # Count suspicious words in a text
        >>> text = "please update your password and verify your account"
        >>> tokens = text.lower().split()
        >>> count = sum(1 for word in tokens if word in suspicious_words)
        >>> print(count > 0)
        True
    """
    return load_lines_as_set(SUSPICIOUS_WORDS, True)
